# ============================================
# D-Module Analysis Script to Reproduce Figure 1
# ============================================
import pandas as pd
import numpy as np
import os
from scipy.interpolate import UnivariateSpline
import matplotlib.pyplot as plt

# Set your directory containing the required CSV files
base_dir = "/your/local/path/to/Nature_DModule_Final"  # <-- Replace with your own path
fig1_dir = os.path.join(base_dir, "Figure1_Variables_Cleaned")
cleaned_csv_path = os.path.join(base_dir, "Cleaned_Inflection_Ranking.csv")
os.makedirs(fig1_dir, exist_ok=True)

# Load ranking table of biomarkers based on aging velocity
df_all = pd.read_csv(os.path.join(base_dir, "Extended_Table.csv"))
df_clean = df_all[np.abs(df_all["a(t) at Peak"]) < 100].copy()
df_clean["|a(t)|"] = np.abs(df_clean["a(t) at Peak"])
df_clean_sorted = df_clean.sort_values(by="|a(t)|", ascending=False).reset_index(drop=True)
top6_clean = df_clean_sorted.head(6)

# Load the biomarker dataset
file_path = os.path.join(base_dir, "1999-2016 Age BMX DEMO_CBC_Chemical_Cho_20250329A.csv")
df_data = pd.read_csv(file_path)
df_data.columns = df_data.columns.str.strip().str.lower()
df_data = df_data[df_data.isnull().mean(axis=1) < 0.7]
df_data = df_data.fillna(df_data.median(numeric_only=True))
df_data = df_data.select_dtypes(include=[np.number]).dropna(subset=["age (years)"])

# Helper function to clean filenames
def safe_filename(name):
    return name.replace("/", "_").replace(" ", "_").replace("(", "").replace(")", "").replace(":", "")

# Function to generate and save D-module panels
def plot_and_save(var, i):
    try:
        df_sub = df_data[["age (years)", var]].dropna()
        df_sub = df_sub[(df_sub[var] > 0) & (df_sub[var] < df_sub[var].quantile(0.99))]
        grouped = df_sub.groupby("age (years)")[var].mean().reset_index()
        if len(grouped) < 10:
            return

        x = grouped["age (years)"].values
        y = grouped[var].values
        spline = UnivariateSpline(x, y, s=1)
        dy = spline.derivative(n=1)(x)
        y_smooth = spline(x)
        a_t = -dy / y_smooth
        b_t = dy + a_t * y_smooth
        inf_idx = np.argmax(np.abs(np.gradient(a_t)))
        inf_age = round(x[inf_idx], 1)

        plt.figure(figsize=(8, 5))
        plt.plot(x, y_smooth, label=var, lw=2)
        plt.plot(x, a_t, '--', label="a(t)", lw=2)
        plt.plot(x, b_t, ':', label="b(t)", lw=2)
        plt.axvline(inf_age, color="red", linestyle="--", label=f"Inflection ≈ {inf_age}")
        plt.scatter([inf_age], [a_t[inf_idx]], color="red")
        plt.xlabel("Age (years)")
        plt.title(f"D-Module Analysis: {var}")
        plt.legend()
        plt.tight_layout()

        filename = f"Fig1_{i:02d}_{safe_filename(var)}"
        plt.savefig(os.path.join(fig1_dir, f"{filename}.png"), dpi=600)
        plt.savefig(os.path.join(fig1_dir, f"{filename}.svg"))
        plt.close()
    except Exception as e:
        print(f"❌ {var} skipped: {e}")

# Generate figures for the top 6 biomarkers with highest |a(t)|
for i, row in enumerate(top6_clean.itertuples(), 1):
    plot_and_save(row.Variable, i)

# Save cleaned ranking table
df_clean_sorted.drop(columns="|a(t)|").to_csv(cleaned_csv_path, index=False)
